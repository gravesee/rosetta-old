pretty.gbm.tree(obj, 1)
c.splits[[1]]
obj$c.splits[[1]]
splt <- sapply(obj$c.splits, function(x) fromBinary(ifelse(x == -1, 0, 1)))
splt
toBinary(11)
ifelse(vtypes == 3, splt[[obj$trees[[n]][[2]] + 1]],
obj$trees[[2]])
splt
ifelse(vtypes == 3, splt[obj$trees[[n]][[2]] + 1],
obj$trees[[2]])
splt
obj$trees[[n]][[2]] + 1
splt[obj$trees[[n]][[2]] + 1]
toBinary(1)
head(splt)
mod$c.splits[[1]]
ifelse(mod$c.splits[[1]] == -1, 0, 1)
toBinarY(ifelse(mod$c.splits[[1]] == -1, 0, 1))
fromBinary(ifelse(mod$c.splits[[1]] == -1, 0, 1))
vtypes == 3
vtypes
preds <- numeric(lenght(vtypes))
preds <- numeric(length(vtypes))
preds <- numeric(length(vtypes))
preds
pretty.tree.rf(rf, 1)
pretty.gbm.tree(obj, 1)
ifelse(vtypes == 3, splt[obj$trees[[2]]], -1)
ifelse(vtypes == 3, splt[obj$trees[[n]][[2]]], -1)
f
f <- obj$trees[[n]][[1]] > -1
f
fac <- vtypes == 3
fac
splits[fac] <- splt[(obj$trees[[n]][[2]] + 1)[fac]]
splits <- numeric(length(vtypes))
fac <- vtypes == 3
splits[fac] <- splt[(obj$trees[[n]][[2]] + 1)[fac]]
splits
splits[!fac] <- obj$trees[[n]][[2]]
splits[!fac] <- obj$trees[[n]][[2]][!fac]
splits
pretty.tree.rf(rf, 1)
splits
splits <- ifelse(vtypes == 3, splt[(obj$trees[[n]][[2]] + 1)],  obj$trees[[n]][[2]])
splits
res <- cbind(
'left'   = obj$trees[[3]],
'right'  = obj$trees[[4]],
'miss'   = obj$trees[[5]],
'status' = ifelse(obj$trees[[n]][[1]] > -1, 1, -1),
'best'   = ifelse(obj$trees[[n]][[1]] > -1, obj$trees[[n]][[1]] + 1, 0),
'pred'   = obj$trees[[n]][[8]],
'split'  = ifelse(vtypes == 3, splt[(obj$trees[[n]][[2]] + 1)],
obj$trees[[n]][[2]]),
'vtype'  = vtypes,
'ncat'   = ncats)
res
res <- with(obj, cbind(
'left'   = trees[[n]][[3]],
'right'  = trees[[n]][[4]],
'miss'   = trees[[n]][[5]],
'status' = ifelse(trees[[n]][[1]] > -1, 1, -1),
'best'   = ifelse(trees[[n]][[1]] > -1, trees[[n]][[1]] + 1, 0),
'pred'   = trees[[n]][[8]],
'split'  = ifelse(vtypes == 3, splt[(trees[[n]][[2]] + 1)], trees[[n]][[2]]),
'vtype'  = vtypes,
'ncat'   = ncats))
res
test <- data.frame(
gene=c('A','B','C'),
Sample1=c(0,1,1.32),
Sample2=c(2,1,3.21),
Sample3=c(0,3,3.33)
)
test
apply(1:nrow(test), function(x) {
test[x,] - test[(x+1):nrow(test),]
})
apply(1:nrow(test), 1, function(x) {
test[x,] - test[(x+1):nrow(test),]
})
apply(1:(nrow(test) - 1), 1, function(x) {
test[x,] - test[(x+1):nrow(test),]
})
apply(1:(nrow(test) - 1), 1, function(x) {
print(x)
test[x,] - test[(x+1):nrow(test),]
})
test[1,]
apply(1:(nrow(test) - 1), 1, function(x) {
test[x,-1] - test[(x+1):nrow(test),-1]
})
x <- 1
test[x,-1] - test[(x+1):nrow(test),-1]
apply(1:(nrow(test) - 1), 1, function(x) {
as.matrix(test[x,-1]) - as.matrix(test[(x+1):nrow(test),-1])
})
as.matrix(test[x,-1]) - as.matrix(test[(x+1):nrow(test),-1])
source('F:/R Dev/rosetta/R/test.R', echo=TRUE)
source('F:/R Dev/rosetta/R/mod.data.funcs.R', echo=TRUE)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
source('F:/R Dev/rosetta/R/utility.R', echo=TRUE)
out <- translate(mod, lang="SAS", pfx="FL___D", 500)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
out <- translate(mod, lang="SAS", pfx="FL___D", 500)
out
cat(out)
cat(out)
cat(out)
out
pretty.tree(mod, 1)
library(gbm)
mod2 <- gbm(Survived~., data=titanic, distribution='bernoulli')
mod2
mod2$var.levels
mod2$var.levels
mod$type
mod2$var.type
sapply(titanic, class)
titanic$Pclass <- ordered(titanic$Pclass)
sapply(titanic, class)
mod2 <- gbm(Survived~., data=titanic, distribution='bernoulli')
mod2$var.type
cbind(sapply(mod2$var.levels, is.numeric))
cbind(sapply(mod2$var.levels, is.numeric), mod2$var.type)
mod2$var.levels
obj <- mod2
mod.data$vtype <- with(obj, ifelse(
sapply(var.levels, is.numeric), 1,
ifelse(
sapply(var.type == 0), 2, 1)))
mod.data$vtype <- with(obj, ifelse(
sapply(var.levels, is.numeric), 1,
ifelse(var.type == 0, 2, 1)))
mod.data <- new.env(parent=globalenv())
mod.data$vtype <- with(obj, ifelse(
sapply(var.levels, is.numeric), 1,
ifelse(var.type == 0, 2, 1)))
mod.data$vtype
mod.data$vtype <- with(obj, ifelse(
sapply(var.levels, is.numeric), 1,
ifelse(var.type == 0, 2, 3)))
mod.data$vtype
cbind(mod.data, sapply(titanic, class))
cbind(mod.data, paste(sapply(titanic, class)))
cbind(mod.data$vtype,     sapply(titanic, class))
cbind(mod.data$vtype,     sapply(titanic, class)[-1])
ncat <- ifelse(mod.data$vtype == 1, 1, sapply(x$var.levels, length))
ncat <- ifelse(mod.data$vtype == 1, 1, sapply(obj$var.levels, length))
ncat
f <- obj$trees[[n]][[1]] > -1
mod$forest$xlevels
mod2$var.levels
obj$var.names
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
source('F:/R Dev/rosetta/R/mod.data.funcs.R', echo=TRUE)
mod.data.gbm(mod2)
out <- mod.data.gbm(mod2)
out$lvls
out$miss
out$ncat
out$vars
out$vtype
pretty.tree(mod2, 1)
mod2$trees
mod2$trees[[1]]
mod2$c.splits
splt <- sapply(obj$c.splits, function(x) fromBinary(ifelse(x == -1, 0, 1)))
splt
mod2 <- gbm(Survived~., data=titanic, distribution='bernoulli', interaction.depth = 3, n.trees = 5000)
splt <- sapply(obj$c.splits, function(x) fromBinary(ifelse(x == -1, 0, 1)))
splt
obj <- mod2
splt
splt <- sapply(obj$c.splits, function(x) fromBinary(ifelse(x == -1, 0, 1)))
splt
pretty.tree(mod, 1)
out$vtypes
n <- 1
obj <- mod2
if (is.null(mod.data)) mod.data <- mod.data(obj)
f <- obj$trees[[n]][[1]] > -1
f
vtypes <- numeric(length(f))
vtypes[f] <- mod.data$vtype[obj$trees[[n]][[1]][f] + 1]
mod.data$vtype
mod.data <- mod.data(obj)
mod.data$vtype
mod.data$vars
mod.data.gbm <- function(obj) {
mod.data <- new.env(parent=globalenv())
mod.data$vtype <- with(obj, ifelse(
sapply(var.levels, is.numeric), 1,
ifelse(var.type == 0, 2, 3)))
ncat <- ifelse(mod.data$vtype == 1, 1, sapply(obj$var.levels, length))
mod.data$xbestsplit <- sapply(obj$c.splits, function(x) {
fromBinary(ifelse(x == -1, 0, 1))
})
mod.data$vars <- obj$var.names
mod.data$lvls <- obj$var.levels
mod.data$miss <- TRUE # support missing nodes?
mod.data$ncat <- ncat
return(mod.data)
}
mod.data <- mod.data(obj)
mod.data <- function(x) UseMethod("mod.data")
mod.data <- mod.data(obj)
mod.data$xbestsplit
f <- obj$trees[[n]][[1]] > -1
vtypes <- numeric(length(f))
vtypes[f] <- mod.data$vtype[obj$trees[[n]][[1]][f] + 1]
vtypes
ncats <- with(obj, ifelse(trees[[n]][[1]] > -1,
mod.data$ncat[trees[[n]][[1]] + 1], 0))
ncats
vtypes %in% c(2,3)
mod.data$xbestsplit
pretty.tree(mod, 1)
pretty.tree(mod, 1)
mod.data <- function(x) UseMethod("mod.data")
pretty.tree(mod, 1)
ncats
pretty.gbm.tree(mod2)
pretty.gbm.tree(mod2, 1)
pretty.gbm.tree(mod2, 10)
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
pretty.tree(mod2, 1)
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
pretty.tree(mod2, 1)
pretty.tree(mod2, 2)
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
pretty.tree(mod2, 2)
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
pretty.tree(mod2, 2)
pretty.tree(mod2, 3)
pretty.tree(mod2, 4)
pretty.tree(mod2, 5)
pretty.tree(mod2, 6)
pretty.tree(mod2, 7)
pretty.tree(mod2, 8)
pretty.tree(mod2, 7)
pretty.tree(mod2, 100)
pretty.tree(mod2, 1000)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod2, 'SAS', 'test', 1)
pretty.tree(mod2, 1000)
pretty.tree(mod, 1000)
pretty.tree(mod, 500)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod2, 'SAS', 'test', 1)
debug(export.pretty.tree.sas)
translate(mod2, 'SAS', 'test', 1)
debug(recurse)
print(i)
mod.data$lvls
mod.data$miss
mod.data$ncat
mod.data$vars
mod.data$vtype
mod.data$xbestsplit
x
pfx
print(n)
vid
val
ids
ids
mems
ltxt
rtxt
print(n)
x
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
translate(mod2, 'SAS', 'test', 1)
undebug(export.pretty.tree.sas)
translate(mod2, 'SAS', 'test', 1)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod2, 'SAS', 'test', 1)
cat(translate(mod2, 'SAS', 'test', 1))
translate(mod2, 'SAS', 'test', 1)
cat(translate(mod2, 'SAS', 'test', 1))
pretty.tree(mod2, 100)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
pretty.tree(mod2, 100)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
log(1, base=1)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
pretty.tree(mod2, 100)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
pretty.tree(mod2, 100)
mod2$interaction.depth
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 1))
cat(translate(mod, 'SAS', 'test', 1))
cat(translate(mod2, 'SAS', 'test', 1))
translate(mod2, 'SAS', 'test', 1)
writeLines(translate(mod2, 'SAS', 'test', 1), con='test.sas', sep = '')
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
writeLines(translate(mod2, 'SAS', 'test', 1), con='test.sas', sep = '')
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
writeLines(translate(mod2, 'SAS', 'test', 1), con='test.sas', sep = '')
writeLines(translate(mod2, 'SAS', 'test', 1), con='test.sas', sep = '')
mod.data
class(mod2)
source('F:/R Dev/rosetta/R/mod.data.funcs.R', echo=TRUE)
writeLines(translate(mod2, 'SAS', 'test', 1), con='test.sas', sep = '')
source('F:/R Dev/rosetta/R/finalizers.R', echo=TRUE)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod, 'SAS', 'test', 1)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod, 'SAS', 'test', 1)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod, 'SAS', 'test', 1)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/finalizers.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/finalizers.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/finalizers.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
source('F:/R Dev/rosetta/R/finalizers.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 1))
cat(translate(mod, 'SAS', 'test', 100))
writeLines(translate(mod, 'SAS', 'test', 100), 'test.sas', sep=''
)
pretty.tree(mod, 100)
translate(mod, 'SAS', 'test', 100)
pretty.tree(mod, 99)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod, 'SAS', 'test', 99)
translate(mod, 'SAS', 'test', 100)
pretty.tree(mod, 100)
debug(pretty.tree)
pretty.tree(mod, 100)
mod.data
mod.data$class
mod.data$lvls
mod.data$ncat
mod.data$vars
mod.data$vtype
ncats
obj$forest$bestvar
obj$forest$bestvar[,100]
nodestatus[,100]
obj$forest$nodestatus[,100]
res
vtype
vtypes
length(vtypes)
best
obj$forest%xbestsplit[,100]
obj$forest$xbestsplit[,100]
obj$forest$bestvar[,100],
obj$forest$bestvar[,100]
mod.data$vtype
mod.data$vtype[obj$forest$bestvar[,100]]
vtypes
cbind(obj$forest$bestvar[,100], vtypes_
cbind(obj$forest$bestvar[,100], vtypes)
mod.data$vtypes
obj$forest$bestvar[,100]
obj$forest$bestvar[,100] > 0
ifelse(obj$forest$bestvar[,100] > 0, mod.data$vtype[bestvar[,100]], 0))
ifelse(obj$forest$bestvar[,100] > 0, mod.data$vtype[bestvar[,100]], 0)
ifelse(obj$forest$bestvar[,100] > 0, mod.data$vtype[obj$forest$bestvar[,100]], 0)
length(obj$forest$bestvar[,100])
obj$forest$bestvar[,100]
mod.data$vtype
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
pretty.tree(mod, 100)
translate(mod, 'SAS', 'test', 100)
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
translate(mod, 'SAS', 'test', 100)
pretty.tree(mod, 100)
mod
debug(pretty.tree)
pretty.tree(mod, 100)
vtypes
obj$forest
obj$forest$bestvar
obj$forest$bestvar[,100]
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
pretty.tree(mod, 100)
obj <- mod
vtypes <- with(obj$forest, ifelse(bestvar[,n] > 0,
mod.data$vtype[bestvar[,n]], 0))
ctypes
vtypes
mod.data <- mod.data(obj)
vtypes <- with(obj$forest, ifelse(bestvar[,n] > 0,
mod.data$vtype[bestvar[,n]], 0))
ctypes
vtypes
f <- obj$forest$bestvar[,n] > -1
f
vtypes <- numeric(length(f))
f <- obj$forest$bestvar[,n] > 0
vtypes <- numeric(length(f))
vtypes
vtypes[f] <- mod.data$vtype[obj$forest$bestvar[f, n]]
vtypes
ncats <- with(obj$forest, ifelse(bestvar[,n] > 0, mod.data$ncat[bestvar[,n]], 0))
res <- structure(
with(obj$forest, cbind(
'left'   = treemap[,,n][,1],
'right'  = treemap[,,n][,2],
'status' = nodestatus[,n],
'best'   = bestvar[,n],
'pred'   = nodepred[,n],
'split'  = xbestsplit[,n],
'vtype'  = vtypes,
'ncat'   = ncats)),
class="pretty.tree")
res
source('F:/R Dev/rosetta/R/pretty.funcs.R', echo=TRUE)
pretty.tree(mod, 100)
source('F:/R Dev/rosetta/R/mod.data.funcs.R', echo=TRUE)
pretty.tree(mod, 100)
translate(mod, 'SAS', 'test', 100)
source('F:/R Dev/rosetta/R/finalizers.R', echo=TRUE)
translate(mod, 'SAS', 'test', 100)
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
translate(mod, 'SAS', 'test', 100)
cat(translate(mod, 'SAS', 'test', 100))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 100))
cat(translate(mod, 'SAS', 'test', 1:100))
cat(translate(mod2, 'SAS', 'test', 1:100))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod2, 'SAS', 'test', 100))
cat(translate(mod, 'SAS', 'test', 100))
source('F:/R Dev/rosetta/R/finalizers.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 100))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 100))
cat(translate(mod2, 'SAS', 'test', 100))
source('F:/R Dev/rosetta/R/translate.R', echo=TRUE)
cat(translate(mod, 'SAS', 'test', 100))
cat(translate(mod2, 'SAS', 'test', 100))
cat(translate(mod2, 'SAS', 'test', 500))
cat(translate(mod, 'SAS', 'test', 500))
cat(translate(mod, 'SAS', 'test', 500))
library(rosetta)
library(rosetta)
